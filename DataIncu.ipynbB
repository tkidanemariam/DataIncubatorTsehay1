{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TSEHAY KIDANEMARIAM DATA INCUBATOR CHALLENGE INTERVIEW PHYTON PROJECT"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "                                1.\tObjectives\n",
    "\n",
    "\tThis project is based on Metro_Interstate_Traffic_Volume dataset retrieved from https://archive.ics.uci.edu/ml/datasets/Metro+Interstate+Traffic+Volume'.\n",
    "\n",
    ".  The main objectives of the project are identifying cause of traffic incidents in Metro interstate in different variables such as public holidays, weather condition, traffic volume, specific date and times that incidents happened.  Identifying the cause of the issue and understanding the various condition that add to the traffic issues will give us better understanding to come up with solution to tackle and prevent or minimize the issues that will alleviate damage caused by traffic incident.\n",
    "\n",
    "\tThe following parts of the paper will give us insights about the dataset we are currently using and graphical presentation of the project will also give us the summarized traffic issues applying data visualization.\n",
    "\n",
    "                    2.\tData understanding/Dataset definition\n",
    "\n",
    "\tMetro_Interstate_Traffic_Volume dataset is retrieved from UCI machine learning and is about the traffic incident happening various conditions.  Such as holidays, weathers and specific date and times.  The dataset contains Ten columns and  48206  rows. Three variables are categorical, five numerical and one date and time variables and one unique ID.\n",
    "\n",
    "\n",
    "\n",
    "Variable Name   Variable Type\n",
    "         \n",
    "NO\n",
    "Unique ID            char \n",
    "Holiday\n",
    "Variable             char type\n",
    "Temp\n",
    "Variable             Number type\n",
    "Rain_1h\n",
    "Variable             Number type\n",
    "Snow_1h\n",
    "Variable             Number type\n",
    "Cloud_all\n",
    "Variable             Number type\n",
    "Weather_main\n",
    "Variable             char type\n",
    "Weather_description\n",
    "Variable             char type\n",
    "Date_time\n",
    "Variable             date & time\n",
    "Traffic_volume\n",
    "Variable             Number type\n",
    "\n",
    "                                3.\tData preparation\n",
    "                                \n",
    "\tIn this project, we used python anaconda for data preparation, data analysis and exploration purpose.  As a result, we identified the number of variables, number records and data types we use for our project.   Dataset is loaded and important library are imported for this particular project\n",
    "\n",
    "\tThe following command used for data loading and importing important libraries for data preparation and exploration.\n",
    "\n",
    "\n",
    "\n",
    "\tWe clean the dataset before we dive to the data exploration and analysis.  Data types that are not properly addressed on the dataset also converted to the proper data type and unnecessary or redundant data will be removed and empty rows will be replaced or removed for the next phase that is data analysis.  \n",
    "\n",
    "\n",
    "\tAfter thorough data inspection, the dataset has one variable that is date and time was defaulted as an object or character on the dataset but converted to right attribute of data and time features as follows.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {},
   "outputs": [],
   "source": [
    "#used to load the file we used.\n",
    "import pandas as pd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 355,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os.path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 356,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 357,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/tsehay/Desktop/IncuCap'"
      ]
     },
     "execution_count": 358,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "metadata": {},
   "outputs": [],
   "source": [
    "path='/Users/tsehay/Desktop/incuCap/Traffic'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 360,
   "metadata": {},
   "outputs": [],
   "source": [
    "#os.chdir('/Users/tsehay/Desktop/incuCap') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 361,
   "metadata": {},
   "outputs": [],
   "source": [
    "Traffic = pd.read_csv('Traffic.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NO</th>\n",
       "      <th>temp</th>\n",
       "      <th>rain_1h</th>\n",
       "      <th>snow_1h</th>\n",
       "      <th>clouds_all</th>\n",
       "      <th>traffic_volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>48204.000000</td>\n",
       "      <td>48204.000000</td>\n",
       "      <td>48204.000000</td>\n",
       "      <td>48204.000000</td>\n",
       "      <td>48204.000000</td>\n",
       "      <td>48204.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>24102.500000</td>\n",
       "      <td>281.205870</td>\n",
       "      <td>0.334264</td>\n",
       "      <td>0.000222</td>\n",
       "      <td>49.362231</td>\n",
       "      <td>3259.818355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>13915.440525</td>\n",
       "      <td>13.338232</td>\n",
       "      <td>44.789133</td>\n",
       "      <td>0.008168</td>\n",
       "      <td>39.015750</td>\n",
       "      <td>1986.860670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>12051.750000</td>\n",
       "      <td>272.160000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1193.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>24102.500000</td>\n",
       "      <td>282.450000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>3380.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>36153.250000</td>\n",
       "      <td>291.806000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>4933.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>48204.000000</td>\n",
       "      <td>310.070000</td>\n",
       "      <td>9831.300000</td>\n",
       "      <td>0.510000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>7280.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 NO          temp       rain_1h       snow_1h    clouds_all  \\\n",
       "count  48204.000000  48204.000000  48204.000000  48204.000000  48204.000000   \n",
       "mean   24102.500000    281.205870      0.334264      0.000222     49.362231   \n",
       "std    13915.440525     13.338232     44.789133      0.008168     39.015750   \n",
       "min        1.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%    12051.750000    272.160000      0.000000      0.000000      1.000000   \n",
       "50%    24102.500000    282.450000      0.000000      0.000000     64.000000   \n",
       "75%    36153.250000    291.806000      0.000000      0.000000     90.000000   \n",
       "max    48204.000000    310.070000   9831.300000      0.510000    100.000000   \n",
       "\n",
       "       traffic_volume  \n",
       "count    48204.000000  \n",
       "mean      3259.818355  \n",
       "std       1986.860670  \n",
       "min          0.000000  \n",
       "25%       1193.000000  \n",
       "50%       3380.000000  \n",
       "75%       4933.000000  \n",
       "max       7280.000000  "
      ]
     },
     "execution_count": 362,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Traffic.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "metadata": {},
   "outputs": [],
   "source": [
    "Traffic.date_time= pd.to_datetime(Traffic.date_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 378,
   "metadata": {},
   "outputs": [],
   "source": [
    "Traffic.NO=str(Traffic.NO)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "object\n"
     ]
    }
   ],
   "source": [
    "print(Traffic['NO'].dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "datetime64[ns]\n"
     ]
    }
   ],
   "source": [
    "print(Traffic['date_time'].dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 381,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                  NO holiday    temp  rain_1h  \\\n",
      "0  0        0            1\\n1            2\\n2    ...    None  288.28      0.0   \n",
      "1  0        0            1\\n1            2\\n2    ...    None  289.36      0.0   \n",
      "2  0        0            1\\n1            2\\n2    ...    None  289.58      0.0   \n",
      "3  0        0            1\\n1            2\\n2    ...    None  290.13      0.0   \n",
      "4  0        0            1\\n1            2\\n2    ...    None  291.14      0.0   \n",
      "\n",
      "   snow_1h  clouds_all weather_main weather_description           date_time  \\\n",
      "0      0.0          40       Clouds    scattered clouds 2012-10-02 09:00:00   \n",
      "1      0.0          75       Clouds       broken clouds 2012-10-02 10:00:00   \n",
      "2      0.0          90       Clouds     overcast clouds 2012-10-02 11:00:00   \n",
      "3      0.0          90       Clouds     overcast clouds 2012-10-02 12:00:00   \n",
      "4      0.0          75       Clouds       broken clouds 2012-10-02 13:00:00   \n",
      "\n",
      "   traffic_volume  \n",
      "0            5545  \n",
      "1            4516  \n",
      "2            4767  \n",
      "3            5026  \n",
      "4            4918  \n"
     ]
    }
   ],
   "source": [
    "print(Traffic.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 382,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 48204 entries, 0 to 48203\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count  Dtype         \n",
      "---  ------               --------------  -----         \n",
      " 0   NO                   48204 non-null  object        \n",
      " 1   holiday              48204 non-null  object        \n",
      " 2   temp                 48204 non-null  float64       \n",
      " 3   rain_1h              48204 non-null  float64       \n",
      " 4   snow_1h              48204 non-null  float64       \n",
      " 5   clouds_all           48204 non-null  int64         \n",
      " 6   weather_main         48204 non-null  object        \n",
      " 7   weather_description  48204 non-null  object        \n",
      " 8   date_time            48204 non-null  datetime64[ns]\n",
      " 9   traffic_volume       48204 non-null  int64         \n",
      "dtypes: datetime64[ns](1), float64(3), int64(2), object(4)\n",
      "memory usage: 3.7+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(Traffic.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 383,
   "metadata": {},
   "outputs": [],
   "source": [
    "TrafficN = Traffic['traffic_volume']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 384,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        5545\n",
      "1        4516\n",
      "2        4767\n",
      "3        5026\n",
      "4        4918\n",
      "         ... \n",
      "48199    3543\n",
      "48200    2781\n",
      "48201    2159\n",
      "48202    1450\n",
      "48203     954\n",
      "Name: traffic_volume, Length: 48204, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(TrafficN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 385,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                      NO holiday    temp  \\\n",
      "0      0        0            1\\n1            2\\n2    ...    None  288.28   \n",
      "1      0        0            1\\n1            2\\n2    ...    None  289.36   \n",
      "2      0        0            1\\n1            2\\n2    ...    None  289.58   \n",
      "3      0        0            1\\n1            2\\n2    ...    None  290.13   \n",
      "4      0        0            1\\n1            2\\n2    ...    None  291.14   \n",
      "...                                                  ...     ...     ...   \n",
      "48197  0        0            1\\n1            2\\n2    ...    None  284.79   \n",
      "48199  0        0            1\\n1            2\\n2    ...    None  283.45   \n",
      "48200  0        0            1\\n1            2\\n2    ...    None  282.76   \n",
      "48202  0        0            1\\n1            2\\n2    ...    None  282.09   \n",
      "48203  0        0            1\\n1            2\\n2    ...    None  282.12   \n",
      "\n",
      "       rain_1h  snow_1h  clouds_all weather_main weather_description  \\\n",
      "0          0.0      0.0          40       Clouds    scattered clouds   \n",
      "1          0.0      0.0          75       Clouds       broken clouds   \n",
      "2          0.0      0.0          90       Clouds     overcast clouds   \n",
      "3          0.0      0.0          90       Clouds     overcast clouds   \n",
      "4          0.0      0.0          75       Clouds       broken clouds   \n",
      "...        ...      ...         ...          ...                 ...   \n",
      "48197      0.0      0.0          75       Clouds       broken clouds   \n",
      "48199      0.0      0.0          75       Clouds       broken clouds   \n",
      "48200      0.0      0.0          90       Clouds     overcast clouds   \n",
      "48202      0.0      0.0          90       Clouds     overcast clouds   \n",
      "48203      0.0      0.0          90       Clouds     overcast clouds   \n",
      "\n",
      "                date_time  traffic_volume  \n",
      "0     2012-10-02 09:00:00            5545  \n",
      "1     2012-10-02 10:00:00            4516  \n",
      "2     2012-10-02 11:00:00            4767  \n",
      "3     2012-10-02 12:00:00            5026  \n",
      "4     2012-10-02 13:00:00            4918  \n",
      "...                   ...             ...  \n",
      "48197 2018-09-30 17:00:00            4132  \n",
      "48199 2018-09-30 19:00:00            3543  \n",
      "48200 2018-09-30 20:00:00            2781  \n",
      "48202 2018-09-30 22:00:00            1450  \n",
      "48203 2018-09-30 23:00:00             954  \n",
      "\n",
      "[15164 rows x 10 columns]\n",
      "0        False\n",
      "1        False\n",
      "2        False\n",
      "3        False\n",
      "4        False\n",
      "         ...  \n",
      "48199    False\n",
      "48200    False\n",
      "48201    False\n",
      "48202    False\n",
      "48203    False\n",
      "Name: holiday, Length: 48204, dtype: bool\n",
      "0        True\n",
      "1        True\n",
      "2        True\n",
      "3        True\n",
      "4        True\n",
      "         ... \n",
      "48199    True\n",
      "48200    True\n",
      "48201    True\n",
      "48202    True\n",
      "48203    True\n",
      "Name: holiday, Length: 48204, dtype: bool\n"
     ]
    }
   ],
   "source": [
    "print(Traffic[Traffic['weather_main'] == 'Clouds'])\n",
    "print(Traffic.holiday != 'None')\n",
    "print(Traffic.holiday == 'None')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 386,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Date and time of the traffic')"
      ]
     },
     "execution_count": 386,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(Traffic.date_time, label='date_time')\n",
    "plt.legend()\n",
    "plt.title(\"Date and time of the traffic\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                  NO holiday    temp  rain_1h  \\\n",
      "0  0        0            1\\n1            2\\n2    ...    None  288.28      0.0   \n",
      "1  0        0            1\\n1            2\\n2    ...    None  289.36      0.0   \n",
      "2  0        0            1\\n1            2\\n2    ...    None  289.58      0.0   \n",
      "3  0        0            1\\n1            2\\n2    ...    None  290.13      0.0   \n",
      "4  0        0            1\\n1            2\\n2    ...    None  291.14      0.0   \n",
      "\n",
      "   snow_1h  clouds_all weather_main weather_description           date_time  \\\n",
      "0      0.0          40       Clouds    scattered clouds 2012-10-02 09:00:00   \n",
      "1      0.0          75       Clouds       broken clouds 2012-10-02 10:00:00   \n",
      "2      0.0          90       Clouds     overcast clouds 2012-10-02 11:00:00   \n",
      "3      0.0          90       Clouds     overcast clouds 2012-10-02 12:00:00   \n",
      "4      0.0          75       Clouds       broken clouds 2012-10-02 13:00:00   \n",
      "\n",
      "   traffic_volume  \n",
      "0            5545  \n",
      "1            4516  \n",
      "2            4767  \n",
      "3            5026  \n",
      "4            4918  \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x15ea0dc70>"
      ]
     },
     "execution_count": 401,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plt.plot(crime.YEAR, crime.REPORTING_AREA, crime.REPORTING_AREA >='400')\n",
    "print(Traffic.head())\n",
    "#plt.plot(Traffic.holiday)\n",
    "plt.plot(Traffic.holiday)\n",
    "#plt.plot(Traffic.snow_1h,Traffic.holiday, label=\"snow\")\n",
    "#plt.plot(Traffic.clouds_all, Traffic.holiday, label=\"clouds\")\n",
    "#label='traffic_holiday')\n",
    "plt.title('Traffic issue in holiday')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 415,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAD4CAYAAAAAczaOAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAQSElEQVR4nO3df6zd9V3H8edrZUP2AwdSSG2ZZaYuFqJsNMiCWXDoYJsZ84+Zkij8galZWNyiiWtd4tSkSWfiVKIjww0HcQNxP4Rs4oa4ZdHgWNnYoEClG3XUdrTbNEP/IMLe/nE+hbPLae/t/XHu997P85GcnO95n+/3nPftvef1/ZzP93tOU1VIkvrwguVuQJI0PYa+JHXE0Jekjhj6ktQRQ1+SOnLScjcwmzPOOKM2bty43G1I0opy3333faeq1s6sDz70N27cyO7du5e7DUlaUZL8x6S60zuS1BFDX5I6YuhLUkcMfUnqiKEvSR0x9CWpI4a+JHXE0Jekjhj6ktSRwX8id5o2bv/Ms8v7d715GTuRpKXhSF+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1JFZQz/J2Uk+n+ThJHuSvLPVT09yV5JH2/VpY9vsSLIvyd4kl43VL0jyQLvvuiRZmh9LkjTJXEb6TwO/U1U/DVwEXJtkM7AduLuqNgF3t9u0+7YC5wKXAx9IsqY91vXANmBTu1y+iD+LJGkWs4Z+VR2qqq+05SeBh4H1wBXATW21m4C3tuUrgFur6qmqegzYB1yYZB1walXdU1UF3Dy2jSRpCk5oTj/JRuDVwJeAs6rqEIx2DMCZbbX1wONjmx1otfVteWZ90vNsS7I7ye4jR46cSIuSpOOYc+gneSnwCeBdVfX94606oVbHqT+/WHVDVW2pqi1r166da4uSpFnMKfSTvJBR4H+0qj7Zyk+0KRva9eFWPwCcPbb5BuBgq2+YUJckTclczt4J8GHg4ap6/9hddwBXt+WrgdvH6luTnJzkHEYHbO9tU0BPJrmoPeZVY9tIkqbgpDmsczHw68ADSe5vtd8DdgG3JbkG+BbwNoCq2pPkNuAhRmf+XFtVz7Tt3g58BDgFuLNdJElTMmvoV9W/MHk+HuDSY2yzE9g5ob4bOO9EGpQkLR4/kStJHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6YuhLUkcMfUnqiKEvSR0x9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI7M+h+j92rj9s88u7x/15uXsRNJWjyO9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjs4Z+khuTHE7y4FjtD5L8Z5L72+VNY/ftSLIvyd4kl43VL0jyQLvvuiRZ/B9HknQ8cxnpfwS4fEL9T6vq/Hb5B4Akm4GtwLltmw8kWdPWvx7YBmxql0mPKUlaQrOGflV9EfjeHB/vCuDWqnqqqh4D9gEXJlkHnFpV91RVATcDb51nz5KkeVrInP47kny9Tf+c1mrrgcfH1jnQauvb8sz6REm2JdmdZPeRI0cW0KIkadx8Q/964CeB84FDwJ+0+qR5+jpOfaKquqGqtlTVlrVr186zRUnSTPMK/ap6oqqeqaofAH8FXNjuOgCcPbbqBuBgq2+YUJckTdG8Qr/N0R/1K8DRM3vuALYmOTnJOYwO2N5bVYeAJ5Nc1M7auQq4fQF9S5Lm4aTZVkhyC3AJcEaSA8B7gUuSnM9oimY/8JsAVbUnyW3AQ8DTwLVV9Ux7qLczOhPoFODOdpEkTdGsoV9VV04of/g46+8Edk6o7wbOO6HuJEmLyk/kSlJHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6YuhLUkcMfUnqiKEvSR0x9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdWTW0E9yY5LDSR4cq52e5K4kj7br08bu25FkX5K9SS4bq1+Q5IF233VJsvg/jiTpeOYy0v8IcPmM2nbg7qraBNzdbpNkM7AVOLdt84Eka9o21wPbgE3tMvMxJUlLbNbQr6ovAt+bUb4CuKkt3wS8dax+a1U9VVWPAfuAC5OsA06tqnuqqoCbx7aRJE3JfOf0z6qqQwDt+sxWXw88PrbegVZb35Zn1iVJU7TYB3InzdPXceqTHyTZlmR3kt1HjhxZtOYkqXfzDf0n2pQN7fpwqx8Azh5bbwNwsNU3TKhPVFU3VNWWqtqydu3aebYoSZppvqF/B3B1W74auH2svjXJyUnOYXTA9t42BfRkkovaWTtXjW2zqm3c/plnL5K03E6abYUktwCXAGckOQC8F9gF3JbkGuBbwNsAqmpPktuAh4CngWur6pn2UG9ndCbQKcCd7SJJmqJZQ7+qrjzGXZceY/2dwM4J9d3AeSfU3RQ4ApfUEz+RK0kdMfQlqSOGviR1xNCXpI7MeiBX0soxfmLC/l1vXsZONFSO9CWpI470pc74bqBvjvQlqSOGviR1xNCXpI44pz8HzoFqpfPrRnSUI31J6oihL0kdcXpHWuEWa+rGacw+ONKXpI440j9Bjoa0mniAtz+G/hLwhSRpqAx9Sc/jO9rVy9CfIl9ImibfcWoSD+RKUkcc6S8SR1WSVgJH+pLUEUf6C+DoXsvFvz3NlyN9SeqII31Jx+VZZ6uLoS9pztwBrHyGvrQCOIevxWLoa8VwlCktnKGvFckdwPLzd7AyefaOJHXEkb5WPEec0twZ+ho0D2BKi8vQ16qymkb97vC0FAx9SYvqWDurY+2E57KjXk078+Vm6EtaMN+VrByGvgbF8JCWlqdsSlJHDH1J6siCpneS7AeeBJ4Bnq6qLUlOB/4W2AjsB361qv6rrb8DuKat/1tV9dmFPP9KNnMaw4NTi8+DfyubU31LYzHm9H+hqr4zdns7cHdV7Uqyvd1+d5LNwFbgXODHgX9K8lNV9cwi9CBpFTDol95SHMi9ArikLd8EfAF4d6vfWlVPAY8l2QdcCNyzBD1oBfGFLk3PQkO/gM8lKeCDVXUDcFZVHQKoqkNJzmzrrgf+bWzbA632PEm2AdsAXvGKVyywRWnlTPW4A5zdSvldDtVCQ//iqjrYgv2uJI8cZ91MqNWkFdvO4waALVu2TFxHknTiFnT2TlUdbNeHgU8xmq55Isk6gHZ9uK1+ADh7bPMNwMGFPL8k6cTMe6Sf5CXAC6rqybb8BuCPgDuAq4Fd7fr2tskdwMeSvJ/RgdxNwL0L6F2aF6cHlp/TWMtnIdM7ZwGfSnL0cT5WVf+Y5MvAbUmuAb4FvA2gqvYkuQ14CHgauNYzd6R+GPTDMO/Qr6pvAj87of5d4NJjbLMT2Dnf59TqYQBoMfh5lxPnJ3IlqSN+4Zo0wTTn/X3Xs3g8XjM7Q1+ahUGi1cTQHwiDZXks17+7o3stF0NfUzP0oBt6f9JiMPQHzncAw3Kivw9/fxoaQ3+AHHFKC+cOdzJDX5oSd+bD0PvOwPP0JakjjvR1QnofJWll8l3Wcwx9LanV/GI71s/mzlBDZuivII6yV4bVvKPTymfo61mLtVMx9KThMvRXqCGM+g13aeUx9FeBpZ5bNty1Wg1h8DRthr4mMujVm152AIZ+JzzTRBIY+t1zRC8932oeJBn6q5iBLmkmv4ZBkjpi6EtSRwx9SeqIoS9JHTH0Jakjnr0jSXO0Gj7A5UhfkjriSF+S5mGljvod6UtSRwx9SeqI0zuStEAraarHkb4kdcTQl6SOOL0jSYto6FM9jvQlqSNdjvT9nnlJvVrVoT/0t1mSNG1O70hSR1b1SF+SltMQZxumHvpJLgf+HFgDfKiqdk27B0matqH8Z+tTnd5Jsgb4S+CNwGbgyiSbp9mDJPVs2iP9C4F9VfVNgCS3AlcADy31E3vGjqQhmvY7gGmH/nrg8bHbB4Cfm7lSkm3Atnbzf5LsnefznQF8Z57bTpN9Lp6V0CPY52JbdX3mfQt+rp+YVJx26GdCrZ5XqLoBuGHBT5bsrqotC32cpWafi2cl9Aj2udjsc+6mfcrmAeDssdsbgINT7kGSujXt0P8ysCnJOUleBGwF7phyD5LUralO71TV00neAXyW0SmbN1bVniV8ygVPEU2JfS6eldAj2Odis885StXzptQlSauUX8MgSR0x9CWpI6sy9JNcnmRvkn1Jti/D89+Y5HCSB8dqpye5K8mj7fq0sft2tF73JrlsrH5BkgfafdclmXTK60L6PDvJ55M8nGRPkncOrdckP5Lk3iRfaz3+4dB6nNHvmiRfTfLpofaZZH97/PuT7B5wny9P8vEkj7S/0dcOrc8kr2r/jkcv30/yrqH1+UOqalVdGB0g/gbwSuBFwNeAzVPu4XXAa4AHx2p/DGxvy9uB97Xlza3Hk4FzWu9r2n33Aq9l9PmGO4E3LnKf64DXtOWXAf/e+hlMr+3xXtqWXwh8CbhoSD3O6Pe3gY8Bnx7w730/cMaM2hD7vAn4jbb8IuDlQ+xzrN81wLcZfShquH0uxYMu56X9o3127PYOYMcy9LGRHw79vcC6trwO2DupP0ZnNr22rfPIWP1K4INL3PPtwC8NtVfgxcBXGH2Ke3A9Mvrcyd3A63ku9IfY536eH/qD6hM4FXiMdrLJUPuc0dsbgH8dep+rcXpn0lc9rF+mXsadVVWHANr1ma1+rH7Xt+WZ9SWRZCPwakYj6UH12qZM7gcOA3dV1eB6bP4M+F3gB2O1IfZZwOeS3JfRV54Msc9XAkeAv27TZR9K8pIB9jluK3BLWx5sn6sx9Of0VQ8Dcqx+p/ZzJHkp8AngXVX1/eOteoyelrTXqnqmqs5nNJK+MMl5x1l9WXpM8svA4aq6b66bHKOfafzeL66q1zD6tttrk7zuOOsuV58nMZoivb6qXg38L6NpkmNZ1tdRRh82fQvwd7Oteox+pvZ6X42hP9SvengiyTqAdn241Y/V74G2PLO+qJK8kFHgf7SqPjnkXqvqv4EvAJcPsMeLgbck2Q/cCrw+yd8MsE+q6mC7Pgx8itG33w6tzwPAgfauDuDjjHYCQ+vzqDcCX6mqJ9rtofa5KkN/qF/1cAdwdVu+mtH8+dH61iQnJzkH2ATc294SPpnkonYU/6qxbRZFe9wPAw9X1fuH2GuStUle3pZPAX4ReGRIPQJU1Y6q2lBVGxn9zf1zVf3a0PpM8pIkLzu6zGge+sGh9VlV3wYeT/KqVrqU0VewD6rPMVfy3NTO0X6G2OfqO5DbDoK8idGZKN8A3rMMz38LcAj4P0Z78GuAH2N0kO/Rdn362Prvab3uZeyIPbCF0QvyG8BfMOOg1iL0+fOM3kJ+Hbi/Xd40pF6BnwG+2np8EPj9Vh9MjxN6voTnDuQOqk9Gc+Vfa5c9R18fQ+uzPf75wO72u/974LSB9vli4LvAj47VBtfn0YtfwyBJHVmN0zuSpGMw9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JH/h91FIogNYrNQgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = Traffic['traffic_volume']\n",
    "#y = Traffic['NO']\n",
    "plt.hist(x, bins=100)\n",
    "plt.show()\n",
    "\n",
    "#plt.scatter('X', 'Y', data=Traffic)\n",
    "#plt.xlabel(\"X\", size=16)\n",
    "#plt.ylabel(\"y\", size=16)\n",
    "#plt.title(\"Scatter plot traffic volume compared by weather issues\", size=18)\n",
    "#Traffic. plot. scatter(HolidayT, WeatherT) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 420,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = Traffic['traffic_volume']\n",
    "#y = Traffic['NO']\n",
    "plt.hist(x, bins=200)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 423,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Date = Traffic['date_time']\n",
    "Date.plot()\n",
    "plt.title('Traffic Volume by date and time')\n",
    "plt.ylabel('traffic_volume')\n",
    "plt.xticks(rotation = 45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 405,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                  NO holiday    temp  rain_1h  \\\n",
      "0  0        0            1\\n1            2\\n2    ...    None  288.28      0.0   \n",
      "1  0        0            1\\n1            2\\n2    ...    None  289.36      0.0   \n",
      "2  0        0            1\\n1            2\\n2    ...    None  289.58      0.0   \n",
      "3  0        0            1\\n1            2\\n2    ...    None  290.13      0.0   \n",
      "4  0        0            1\\n1            2\\n2    ...    None  291.14      0.0   \n",
      "\n",
      "   snow_1h  clouds_all weather_main weather_description           date_time  \\\n",
      "0      0.0          40       Clouds    scattered clouds 2012-10-02 09:00:00   \n",
      "1      0.0          75       Clouds       broken clouds 2012-10-02 10:00:00   \n",
      "2      0.0          90       Clouds     overcast clouds 2012-10-02 11:00:00   \n",
      "3      0.0          90       Clouds     overcast clouds 2012-10-02 12:00:00   \n",
      "4      0.0          75       Clouds       broken clouds 2012-10-02 13:00:00   \n",
      "\n",
      "   traffic_volume  \n",
      "0            5545  \n",
      "1            4516  \n",
      "2            4767  \n",
      "3            5026  \n",
      "4            4918  \n"
     ]
    }
   ],
   "source": [
    "Weather = Traffic.groupby(['weather_main'])\n",
    "print(Traffic.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
